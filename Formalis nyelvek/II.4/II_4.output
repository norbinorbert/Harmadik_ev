Grammar

    0 $accept: program $end

    1 program: instruction ';'
    2        | instruction error ';'
    3        | program instruction ';'
    4        | program instruction error ';'

    5 instruction: declaration
    6            | value_assigning
    7            | read
    8            | write
    9            | if
   10            | if_else
   11            | while

   12 declaration: TYPE_INT VARIABLE
   13            | TYPE_DOUBLE VARIABLE

   14 $@1: /* empty */

   15 value_assigning: VARIABLE '=' $@1 arithmetic_expression

   16 arithmetic_expression: INT
   17                      | DOUBLE
   18                      | VARIABLE

   19 $@2: /* empty */

   20 arithmetic_expression: arithmetic_expression '+' $@2 arithmetic_expression

   21 $@3: /* empty */

   22 arithmetic_expression: arithmetic_expression '-' $@3 arithmetic_expression

   23 $@4: /* empty */

   24 arithmetic_expression: arithmetic_expression '*' $@4 arithmetic_expression

   25 $@5: /* empty */

   26 $@6: /* empty */

   27 arithmetic_expression: '(' $@5 arithmetic_expression ')' $@6

   28 $@7: /* empty */

   29 arithmetic_expression: '-' $@7 arithmetic_expression

   30 read: READ VARIABLE

   31 $@8: /* empty */

   32 write: WRITE $@8 writable_stuff

   33 writable_stuff: arithmetic_expression
   34               | STRING

   35 $@9: /* empty */

   36 logical_expression: arithmetic_expression EQUALS $@9 arithmetic_expression

   37 $@10: /* empty */

   38 logical_expression: arithmetic_expression NOT_EQUALS $@10 arithmetic_expression

   39 $@11: /* empty */

   40 logical_expression: arithmetic_expression '>' $@11 arithmetic_expression

   41 $@12: /* empty */

   42 logical_expression: arithmetic_expression '<' $@12 arithmetic_expression

   43 $@13: /* empty */

   44 logical_expression: logical_expression OR $@13 logical_expression

   45 $@14: /* empty */

   46 logical_expression: logical_expression AND $@14 logical_expression

   47 $@15: /* empty */

   48 $@16: /* empty */

   49 if: IF '(' $@15 logical_expression ')' '{' $@16 program '}'

   50 $@17: /* empty */

   51 if_else: if ELSE '{' $@17 program '}'

   52 $@18: /* empty */

   53 $@19: /* empty */

   54 while: WHILE '(' $@18 logical_expression ')' '{' $@19 program '}'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 27 49 54
')' (41) 27 49 54
'*' (42) 24
'+' (43) 20
'-' (45) 22 29
';' (59) 1 2 3 4
'<' (60) 42
'=' (61) 15
'>' (62) 40
'{' (123) 49 51 54
'}' (125) 49 51 54
error (256) 2 4
TYPE_INT (258) 12
TYPE_DOUBLE (259) 13
VARIABLE (260) 12 13 15 18 30
INT (261) 16
DOUBLE (262) 17
STRING (263) 34
WRITE (264) 32
READ (265) 30
IF (266) 49
ELSE (267) 51
WHILE (268) 54
EQUALS (269) 36
NOT_EQUALS (270) 38
OR (271) 44
AND (272) 46


Nonterminals, with rules where they appear

$accept (29)
    on left: 0
program (30)
    on left: 1 2 3 4, on right: 0 3 4 49 51 54
instruction (31)
    on left: 5 6 7 8 9 10 11, on right: 1 2 3 4
declaration (32)
    on left: 12 13, on right: 5
value_assigning (33)
    on left: 15, on right: 6
$@1 (34)
    on left: 14, on right: 15
arithmetic_expression (35)
    on left: 16 17 18 20 22 24 27 29, on right: 15 20 22 24 27 29 33
    36 38 40 42
$@2 (36)
    on left: 19, on right: 20
$@3 (37)
    on left: 21, on right: 22
$@4 (38)
    on left: 23, on right: 24
$@5 (39)
    on left: 25, on right: 27
$@6 (40)
    on left: 26, on right: 27
$@7 (41)
    on left: 28, on right: 29
read (42)
    on left: 30, on right: 7
write (43)
    on left: 32, on right: 8
$@8 (44)
    on left: 31, on right: 32
writable_stuff (45)
    on left: 33 34, on right: 32
logical_expression (46)
    on left: 36 38 40 42 44 46, on right: 44 46 49 54
$@9 (47)
    on left: 35, on right: 36
$@10 (48)
    on left: 37, on right: 38
$@11 (49)
    on left: 39, on right: 40
$@12 (50)
    on left: 41, on right: 42
$@13 (51)
    on left: 43, on right: 44
$@14 (52)
    on left: 45, on right: 46
if (53)
    on left: 49, on right: 9 51
$@15 (54)
    on left: 47, on right: 49
$@16 (55)
    on left: 48, on right: 49
if_else (56)
    on left: 51, on right: 10
$@17 (57)
    on left: 50, on right: 51
while (58)
    on left: 54, on right: 11
$@18 (59)
    on left: 52, on right: 54
$@19 (60)
    on left: 53, on right: 54


state 0

    0 $accept: . program $end

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    WRITE        shift, and go to state 4
    READ         shift, and go to state 5
    IF           shift, and go to state 6
    WHILE        shift, and go to state 7

    program          go to state 8
    instruction      go to state 9
    declaration      go to state 10
    value_assigning  go to state 11
    read             go to state 12
    write            go to state 13
    if               go to state 14
    if_else          go to state 15
    while            go to state 16


state 1

   12 declaration: TYPE_INT . VARIABLE

    VARIABLE  shift, and go to state 17


state 2

   13 declaration: TYPE_DOUBLE . VARIABLE

    VARIABLE  shift, and go to state 18


state 3

   15 value_assigning: VARIABLE . '=' $@1 arithmetic_expression

    '='  shift, and go to state 19


state 4

   32 write: WRITE . $@8 writable_stuff

    $default  reduce using rule 31 ($@8)

    $@8  go to state 20


state 5

   30 read: READ . VARIABLE

    VARIABLE  shift, and go to state 21


state 6

   49 if: IF . '(' $@15 logical_expression ')' '{' $@16 program '}'

    '('  shift, and go to state 22


state 7

   54 while: WHILE . '(' $@18 logical_expression ')' '{' $@19 program '}'

    '('  shift, and go to state 23


state 8

    0 $accept: program . $end
    3 program: program . instruction ';'
    4        | program . instruction error ';'

    $end         shift, and go to state 24
    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    WRITE        shift, and go to state 4
    READ         shift, and go to state 5
    IF           shift, and go to state 6
    WHILE        shift, and go to state 7

    instruction      go to state 25
    declaration      go to state 10
    value_assigning  go to state 11
    read             go to state 12
    write            go to state 13
    if               go to state 14
    if_else          go to state 15
    while            go to state 16


state 9

    1 program: instruction . ';'
    2        | instruction . error ';'

    error  shift, and go to state 26
    ';'    shift, and go to state 27


state 10

    5 instruction: declaration .

    $default  reduce using rule 5 (instruction)


state 11

    6 instruction: value_assigning .

    $default  reduce using rule 6 (instruction)


state 12

    7 instruction: read .

    $default  reduce using rule 7 (instruction)


state 13

    8 instruction: write .

    $default  reduce using rule 8 (instruction)


state 14

    9 instruction: if .
   51 if_else: if . ELSE '{' $@17 program '}'

    ELSE  shift, and go to state 28

    $default  reduce using rule 9 (instruction)


state 15

   10 instruction: if_else .

    $default  reduce using rule 10 (instruction)


state 16

   11 instruction: while .

    $default  reduce using rule 11 (instruction)


state 17

   12 declaration: TYPE_INT VARIABLE .

    $default  reduce using rule 12 (declaration)


state 18

   13 declaration: TYPE_DOUBLE VARIABLE .

    $default  reduce using rule 13 (declaration)


state 19

   15 value_assigning: VARIABLE '=' . $@1 arithmetic_expression

    $default  reduce using rule 14 ($@1)

    $@1  go to state 29


state 20

   32 write: WRITE $@8 . writable_stuff

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    STRING    shift, and go to state 33
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 36
    writable_stuff         go to state 37


state 21

   30 read: READ VARIABLE .

    $default  reduce using rule 30 (read)


state 22

   49 if: IF '(' . $@15 logical_expression ')' '{' $@16 program '}'

    $default  reduce using rule 47 ($@15)

    $@15  go to state 38


state 23

   54 while: WHILE '(' . $@18 logical_expression ')' '{' $@19 program '}'

    $default  reduce using rule 52 ($@18)

    $@18  go to state 39


state 24

    0 $accept: program $end .

    $default  accept


state 25

    3 program: program instruction . ';'
    4        | program instruction . error ';'

    error  shift, and go to state 40
    ';'    shift, and go to state 41


state 26

    2 program: instruction error . ';'

    ';'  shift, and go to state 42


state 27

    1 program: instruction ';' .

    $default  reduce using rule 1 (program)


state 28

   51 if_else: if ELSE . '{' $@17 program '}'

    '{'  shift, and go to state 43


state 29

   15 value_assigning: VARIABLE '=' $@1 . arithmetic_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 44


state 30

   18 arithmetic_expression: VARIABLE .

    $default  reduce using rule 18 (arithmetic_expression)


state 31

   16 arithmetic_expression: INT .

    $default  reduce using rule 16 (arithmetic_expression)


state 32

   17 arithmetic_expression: DOUBLE .

    $default  reduce using rule 17 (arithmetic_expression)


state 33

   34 writable_stuff: STRING .

    $default  reduce using rule 34 (writable_stuff)


state 34

   29 arithmetic_expression: '-' . $@7 arithmetic_expression

    $default  reduce using rule 28 ($@7)

    $@7  go to state 45


state 35

   27 arithmetic_expression: '(' . $@5 arithmetic_expression ')' $@6

    $default  reduce using rule 25 ($@5)

    $@5  go to state 46


state 36

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression
   33 writable_stuff: arithmetic_expression .

    '+'  shift, and go to state 47
    '-'  shift, and go to state 48
    '*'  shift, and go to state 49

    $default  reduce using rule 33 (writable_stuff)


state 37

   32 write: WRITE $@8 writable_stuff .

    $default  reduce using rule 32 (write)


state 38

   49 if: IF '(' $@15 . logical_expression ')' '{' $@16 program '}'

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 50
    logical_expression     go to state 51


state 39

   54 while: WHILE '(' $@18 . logical_expression ')' '{' $@19 program '}'

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 50
    logical_expression     go to state 52


state 40

    4 program: program instruction error . ';'

    ';'  shift, and go to state 53


state 41

    3 program: program instruction ';' .

    $default  reduce using rule 3 (program)


state 42

    2 program: instruction error ';' .

    $default  reduce using rule 2 (program)


state 43

   51 if_else: if ELSE '{' . $@17 program '}'

    $default  reduce using rule 50 ($@17)

    $@17  go to state 54


state 44

   15 value_assigning: VARIABLE '=' $@1 arithmetic_expression .
   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression

    '+'  shift, and go to state 47
    '-'  shift, and go to state 48
    '*'  shift, and go to state 49

    $default  reduce using rule 15 (value_assigning)


state 45

   29 arithmetic_expression: '-' $@7 . arithmetic_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 55


state 46

   27 arithmetic_expression: '(' $@5 . arithmetic_expression ')' $@6

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 56


state 47

   20 arithmetic_expression: arithmetic_expression '+' . $@2 arithmetic_expression

    $default  reduce using rule 19 ($@2)

    $@2  go to state 57


state 48

   22 arithmetic_expression: arithmetic_expression '-' . $@3 arithmetic_expression

    $default  reduce using rule 21 ($@3)

    $@3  go to state 58


state 49

   24 arithmetic_expression: arithmetic_expression '*' . $@4 arithmetic_expression

    $default  reduce using rule 23 ($@4)

    $@4  go to state 59


state 50

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression
   36 logical_expression: arithmetic_expression . EQUALS $@9 arithmetic_expression
   38                   | arithmetic_expression . NOT_EQUALS $@10 arithmetic_expression
   40                   | arithmetic_expression . '>' $@11 arithmetic_expression
   42                   | arithmetic_expression . '<' $@12 arithmetic_expression

    EQUALS      shift, and go to state 60
    NOT_EQUALS  shift, and go to state 61
    '+'         shift, and go to state 47
    '-'         shift, and go to state 48
    '*'         shift, and go to state 49
    '>'         shift, and go to state 62
    '<'         shift, and go to state 63


state 51

   44 logical_expression: logical_expression . OR $@13 logical_expression
   46                   | logical_expression . AND $@14 logical_expression
   49 if: IF '(' $@15 logical_expression . ')' '{' $@16 program '}'

    OR   shift, and go to state 64
    AND  shift, and go to state 65
    ')'  shift, and go to state 66


state 52

   44 logical_expression: logical_expression . OR $@13 logical_expression
   46                   | logical_expression . AND $@14 logical_expression
   54 while: WHILE '(' $@18 logical_expression . ')' '{' $@19 program '}'

    OR   shift, and go to state 64
    AND  shift, and go to state 65
    ')'  shift, and go to state 67


state 53

    4 program: program instruction error ';' .

    $default  reduce using rule 4 (program)


state 54

   51 if_else: if ELSE '{' $@17 . program '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    WRITE        shift, and go to state 4
    READ         shift, and go to state 5
    IF           shift, and go to state 6
    WHILE        shift, and go to state 7

    program          go to state 68
    instruction      go to state 9
    declaration      go to state 10
    value_assigning  go to state 11
    read             go to state 12
    write            go to state 13
    if               go to state 14
    if_else          go to state 15
    while            go to state 16


state 55

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression
   29                      | '-' $@7 arithmetic_expression .

    '*'  shift, and go to state 49

    $default  reduce using rule 29 (arithmetic_expression)


state 56

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression
   27                      | '(' $@5 arithmetic_expression . ')' $@6

    '+'  shift, and go to state 47
    '-'  shift, and go to state 48
    '*'  shift, and go to state 49
    ')'  shift, and go to state 69


state 57

   20 arithmetic_expression: arithmetic_expression '+' $@2 . arithmetic_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 70


state 58

   22 arithmetic_expression: arithmetic_expression '-' $@3 . arithmetic_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 71


state 59

   24 arithmetic_expression: arithmetic_expression '*' $@4 . arithmetic_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 72


state 60

   36 logical_expression: arithmetic_expression EQUALS . $@9 arithmetic_expression

    $default  reduce using rule 35 ($@9)

    $@9  go to state 73


state 61

   38 logical_expression: arithmetic_expression NOT_EQUALS . $@10 arithmetic_expression

    $default  reduce using rule 37 ($@10)

    $@10  go to state 74


state 62

   40 logical_expression: arithmetic_expression '>' . $@11 arithmetic_expression

    $default  reduce using rule 39 ($@11)

    $@11  go to state 75


state 63

   42 logical_expression: arithmetic_expression '<' . $@12 arithmetic_expression

    $default  reduce using rule 41 ($@12)

    $@12  go to state 76


state 64

   44 logical_expression: logical_expression OR . $@13 logical_expression

    $default  reduce using rule 43 ($@13)

    $@13  go to state 77


state 65

   46 logical_expression: logical_expression AND . $@14 logical_expression

    $default  reduce using rule 45 ($@14)

    $@14  go to state 78


state 66

   49 if: IF '(' $@15 logical_expression ')' . '{' $@16 program '}'

    '{'  shift, and go to state 79


state 67

   54 while: WHILE '(' $@18 logical_expression ')' . '{' $@19 program '}'

    '{'  shift, and go to state 80


state 68

    3 program: program . instruction ';'
    4        | program . instruction error ';'
   51 if_else: if ELSE '{' $@17 program . '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    WRITE        shift, and go to state 4
    READ         shift, and go to state 5
    IF           shift, and go to state 6
    WHILE        shift, and go to state 7
    '}'          shift, and go to state 81

    instruction      go to state 25
    declaration      go to state 10
    value_assigning  go to state 11
    read             go to state 12
    write            go to state 13
    if               go to state 14
    if_else          go to state 15
    while            go to state 16


state 69

   27 arithmetic_expression: '(' $@5 arithmetic_expression ')' . $@6

    $default  reduce using rule 26 ($@6)

    $@6  go to state 82


state 70

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   20                      | arithmetic_expression '+' $@2 arithmetic_expression .
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression

    '*'  shift, and go to state 49

    $default  reduce using rule 20 (arithmetic_expression)


state 71

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   22                      | arithmetic_expression '-' $@3 arithmetic_expression .
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression

    '*'  shift, and go to state 49

    $default  reduce using rule 22 (arithmetic_expression)


state 72

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression
   24                      | arithmetic_expression '*' $@4 arithmetic_expression .

    $default  reduce using rule 24 (arithmetic_expression)


state 73

   36 logical_expression: arithmetic_expression EQUALS $@9 . arithmetic_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 83


state 74

   38 logical_expression: arithmetic_expression NOT_EQUALS $@10 . arithmetic_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 84


state 75

   40 logical_expression: arithmetic_expression '>' $@11 . arithmetic_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 85


state 76

   42 logical_expression: arithmetic_expression '<' $@12 . arithmetic_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 86


state 77

   44 logical_expression: logical_expression OR $@13 . logical_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 50
    logical_expression     go to state 87


state 78

   46 logical_expression: logical_expression AND $@14 . logical_expression

    VARIABLE  shift, and go to state 30
    INT       shift, and go to state 31
    DOUBLE    shift, and go to state 32
    '-'       shift, and go to state 34
    '('       shift, and go to state 35

    arithmetic_expression  go to state 50
    logical_expression     go to state 88


state 79

   49 if: IF '(' $@15 logical_expression ')' '{' . $@16 program '}'

    $default  reduce using rule 48 ($@16)

    $@16  go to state 89


state 80

   54 while: WHILE '(' $@18 logical_expression ')' '{' . $@19 program '}'

    $default  reduce using rule 53 ($@19)

    $@19  go to state 90


state 81

   51 if_else: if ELSE '{' $@17 program '}' .

    $default  reduce using rule 51 (if_else)


state 82

   27 arithmetic_expression: '(' $@5 arithmetic_expression ')' $@6 .

    $default  reduce using rule 27 (arithmetic_expression)


state 83

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression
   36 logical_expression: arithmetic_expression EQUALS $@9 arithmetic_expression .

    '+'  shift, and go to state 47
    '-'  shift, and go to state 48
    '*'  shift, and go to state 49

    $default  reduce using rule 36 (logical_expression)


state 84

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression
   38 logical_expression: arithmetic_expression NOT_EQUALS $@10 arithmetic_expression .

    '+'  shift, and go to state 47
    '-'  shift, and go to state 48
    '*'  shift, and go to state 49

    $default  reduce using rule 38 (logical_expression)


state 85

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression
   40 logical_expression: arithmetic_expression '>' $@11 arithmetic_expression .

    '+'  shift, and go to state 47
    '-'  shift, and go to state 48
    '*'  shift, and go to state 49

    $default  reduce using rule 40 (logical_expression)


state 86

   20 arithmetic_expression: arithmetic_expression . '+' $@2 arithmetic_expression
   22                      | arithmetic_expression . '-' $@3 arithmetic_expression
   24                      | arithmetic_expression . '*' $@4 arithmetic_expression
   42 logical_expression: arithmetic_expression '<' $@12 arithmetic_expression .

    '+'  shift, and go to state 47
    '-'  shift, and go to state 48
    '*'  shift, and go to state 49

    $default  reduce using rule 42 (logical_expression)


state 87

   44 logical_expression: logical_expression . OR $@13 logical_expression
   44                   | logical_expression OR $@13 logical_expression .
   46                   | logical_expression . AND $@14 logical_expression

    $default  reduce using rule 44 (logical_expression)


state 88

   44 logical_expression: logical_expression . OR $@13 logical_expression
   46                   | logical_expression . AND $@14 logical_expression
   46                   | logical_expression AND $@14 logical_expression .

    $default  reduce using rule 46 (logical_expression)


state 89

   49 if: IF '(' $@15 logical_expression ')' '{' $@16 . program '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    WRITE        shift, and go to state 4
    READ         shift, and go to state 5
    IF           shift, and go to state 6
    WHILE        shift, and go to state 7

    program          go to state 91
    instruction      go to state 9
    declaration      go to state 10
    value_assigning  go to state 11
    read             go to state 12
    write            go to state 13
    if               go to state 14
    if_else          go to state 15
    while            go to state 16


state 90

   54 while: WHILE '(' $@18 logical_expression ')' '{' $@19 . program '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    WRITE        shift, and go to state 4
    READ         shift, and go to state 5
    IF           shift, and go to state 6
    WHILE        shift, and go to state 7

    program          go to state 92
    instruction      go to state 9
    declaration      go to state 10
    value_assigning  go to state 11
    read             go to state 12
    write            go to state 13
    if               go to state 14
    if_else          go to state 15
    while            go to state 16


state 91

    3 program: program . instruction ';'
    4        | program . instruction error ';'
   49 if: IF '(' $@15 logical_expression ')' '{' $@16 program . '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    WRITE        shift, and go to state 4
    READ         shift, and go to state 5
    IF           shift, and go to state 6
    WHILE        shift, and go to state 7
    '}'          shift, and go to state 93

    instruction      go to state 25
    declaration      go to state 10
    value_assigning  go to state 11
    read             go to state 12
    write            go to state 13
    if               go to state 14
    if_else          go to state 15
    while            go to state 16


state 92

    3 program: program . instruction ';'
    4        | program . instruction error ';'
   54 while: WHILE '(' $@18 logical_expression ')' '{' $@19 program . '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    WRITE        shift, and go to state 4
    READ         shift, and go to state 5
    IF           shift, and go to state 6
    WHILE        shift, and go to state 7
    '}'          shift, and go to state 94

    instruction      go to state 25
    declaration      go to state 10
    value_assigning  go to state 11
    read             go to state 12
    write            go to state 13
    if               go to state 14
    if_else          go to state 15
    while            go to state 16


state 93

   49 if: IF '(' $@15 logical_expression ')' '{' $@16 program '}' .

    $default  reduce using rule 49 (if)


state 94

   54 while: WHILE '(' $@18 logical_expression ')' '{' $@19 program '}' .

    $default  reduce using rule 54 (while)
