Grammar

    0 $accept: program $end

    1 program: instruction ';'
    2        | instruction error ';'
    3        | program instruction ';'
    4        | program instruction error ';'

    5 instruction: declaration
    6            | value_assigning
    7            | arithmetic_expression
    8            | read
    9            | write
   10            | if
   11            | while
   12            | logical_expression

   13 declaration: TYPE_INT VARIABLE
   14            | TYPE_DOUBLE VARIABLE

   15 value_assigning: VARIABLE '=' arithmetic_expression

   16 arithmetic_expression: INT
   17                      | DOUBLE
   18                      | VARIABLE
   19                      | arithmetic_expression '+' arithmetic_expression
   20                      | arithmetic_expression '-' arithmetic_expression
   21                      | arithmetic_expression '*' arithmetic_expression
   22                      | '(' arithmetic_expression ')'
   23                      | '-' arithmetic_expression

   24 read: READ VARIABLE

   25 write: WRITE arithmetic_expression
   26      | WRITE STRING

   27 logical_expression: arithmetic_expression EQUALS arithmetic_expression
   28                   | arithmetic_expression NOT_EQUALS arithmetic_expression
   29                   | logical_expression OR logical_expression
   30                   | logical_expression AND logical_expression
   31                   | '(' logical_expression ')'

   32 if: IF '(' logical_expression ')' '{' program '}'
   33   | IF '(' logical_expression ')' '{' program '}' ELSE '{' program '}'

   34 while: WHILE '(' logical_expression ')' '{' program '}'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 22 31 32 33 34
')' (41) 22 31 32 33 34
'*' (42) 21
'+' (43) 19
'-' (45) 20 23
';' (59) 1 2 3 4
'=' (61) 15
'{' (123) 32 33 34
'}' (125) 32 33 34
error (256) 2 4
TYPE_INT (258) 13
TYPE_DOUBLE (259) 14
VARIABLE (260) 13 14 15 18 24
INT (261) 16
DOUBLE (262) 17
STRING (263) 26
WRITE (264) 25 26
READ (265) 24
IF (266) 32 33
ELSE (267) 33
WHILE (268) 34
EQUALS (269) 27
NOT_EQUALS (270) 28
OR (271) 29
AND (272) 30


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
program (28)
    on left: 1 2 3 4, on right: 0 3 4 32 33 34
instruction (29)
    on left: 5 6 7 8 9 10 11 12, on right: 1 2 3 4
declaration (30)
    on left: 13 14, on right: 5
value_assigning (31)
    on left: 15, on right: 6
arithmetic_expression (32)
    on left: 16 17 18 19 20 21 22 23, on right: 7 15 19 20 21 22 23
    25 27 28
read (33)
    on left: 24, on right: 8
write (34)
    on left: 25 26, on right: 9
logical_expression (35)
    on left: 27 28 29 30 31, on right: 12 29 30 31 32 33 34
if (36)
    on left: 32 33, on right: 10
while (37)
    on left: 34, on right: 11


state 0

    0 $accept: . program $end

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    INT          shift, and go to state 4
    DOUBLE       shift, and go to state 5
    WRITE        shift, and go to state 6
    READ         shift, and go to state 7
    IF           shift, and go to state 8
    WHILE        shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    program                go to state 12
    instruction            go to state 13
    declaration            go to state 14
    value_assigning        go to state 15
    arithmetic_expression  go to state 16
    read                   go to state 17
    write                  go to state 18
    logical_expression     go to state 19
    if                     go to state 20
    while                  go to state 21


state 1

   13 declaration: TYPE_INT . VARIABLE

    VARIABLE  shift, and go to state 22


state 2

   14 declaration: TYPE_DOUBLE . VARIABLE

    VARIABLE  shift, and go to state 23


state 3

   15 value_assigning: VARIABLE . '=' arithmetic_expression
   18 arithmetic_expression: VARIABLE .

    '='  shift, and go to state 24

    $default  reduce using rule 18 (arithmetic_expression)


state 4

   16 arithmetic_expression: INT .

    $default  reduce using rule 16 (arithmetic_expression)


state 5

   17 arithmetic_expression: DOUBLE .

    $default  reduce using rule 17 (arithmetic_expression)


state 6

   25 write: WRITE . arithmetic_expression
   26      | WRITE . STRING

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    STRING    shift, and go to state 26
    '-'       shift, and go to state 10
    '('       shift, and go to state 27

    arithmetic_expression  go to state 28


state 7

   24 read: READ . VARIABLE

    VARIABLE  shift, and go to state 29


state 8

   32 if: IF . '(' logical_expression ')' '{' program '}'
   33   | IF . '(' logical_expression ')' '{' program '}' ELSE '{' program '}'

    '('  shift, and go to state 30


state 9

   34 while: WHILE . '(' logical_expression ')' '{' program '}'

    '('  shift, and go to state 31


state 10

   23 arithmetic_expression: '-' . arithmetic_expression

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 27

    arithmetic_expression  go to state 32


state 11

   22 arithmetic_expression: '(' . arithmetic_expression ')'
   31 logical_expression: '(' . logical_expression ')'

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 11

    arithmetic_expression  go to state 33
    logical_expression     go to state 34


state 12

    0 $accept: program . $end
    3 program: program . instruction ';'
    4        | program . instruction error ';'

    $end         shift, and go to state 35
    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    INT          shift, and go to state 4
    DOUBLE       shift, and go to state 5
    WRITE        shift, and go to state 6
    READ         shift, and go to state 7
    IF           shift, and go to state 8
    WHILE        shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    instruction            go to state 36
    declaration            go to state 14
    value_assigning        go to state 15
    arithmetic_expression  go to state 16
    read                   go to state 17
    write                  go to state 18
    logical_expression     go to state 19
    if                     go to state 20
    while                  go to state 21


state 13

    1 program: instruction . ';'
    2        | instruction . error ';'

    error  shift, and go to state 37
    ';'    shift, and go to state 38


state 14

    5 instruction: declaration .

    $default  reduce using rule 5 (instruction)


state 15

    6 instruction: value_assigning .

    $default  reduce using rule 6 (instruction)


state 16

    7 instruction: arithmetic_expression .
   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression
   27 logical_expression: arithmetic_expression . EQUALS arithmetic_expression
   28                   | arithmetic_expression . NOT_EQUALS arithmetic_expression

    EQUALS      shift, and go to state 39
    NOT_EQUALS  shift, and go to state 40
    '+'         shift, and go to state 41
    '-'         shift, and go to state 42
    '*'         shift, and go to state 43

    $default  reduce using rule 7 (instruction)


state 17

    8 instruction: read .

    $default  reduce using rule 8 (instruction)


state 18

    9 instruction: write .

    $default  reduce using rule 9 (instruction)


state 19

   12 instruction: logical_expression .
   29 logical_expression: logical_expression . OR logical_expression
   30                   | logical_expression . AND logical_expression

    OR   shift, and go to state 44
    AND  shift, and go to state 45

    $default  reduce using rule 12 (instruction)


state 20

   10 instruction: if .

    $default  reduce using rule 10 (instruction)


state 21

   11 instruction: while .

    $default  reduce using rule 11 (instruction)


state 22

   13 declaration: TYPE_INT VARIABLE .

    $default  reduce using rule 13 (declaration)


state 23

   14 declaration: TYPE_DOUBLE VARIABLE .

    $default  reduce using rule 14 (declaration)


state 24

   15 value_assigning: VARIABLE '=' . arithmetic_expression

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 27

    arithmetic_expression  go to state 46


state 25

   18 arithmetic_expression: VARIABLE .

    $default  reduce using rule 18 (arithmetic_expression)


state 26

   26 write: WRITE STRING .

    $default  reduce using rule 26 (write)


state 27

   22 arithmetic_expression: '(' . arithmetic_expression ')'

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 27

    arithmetic_expression  go to state 47


state 28

   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression
   25 write: WRITE arithmetic_expression .

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43

    $default  reduce using rule 25 (write)


state 29

   24 read: READ VARIABLE .

    $default  reduce using rule 24 (read)


state 30

   32 if: IF '(' . logical_expression ')' '{' program '}'
   33   | IF '(' . logical_expression ')' '{' program '}' ELSE '{' program '}'

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 11

    arithmetic_expression  go to state 48
    logical_expression     go to state 49


state 31

   34 while: WHILE '(' . logical_expression ')' '{' program '}'

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 11

    arithmetic_expression  go to state 48
    logical_expression     go to state 50


state 32

   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression
   23                      | '-' arithmetic_expression .

    '*'  shift, and go to state 43

    $default  reduce using rule 23 (arithmetic_expression)


state 33

   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression
   22                      | '(' arithmetic_expression . ')'
   27 logical_expression: arithmetic_expression . EQUALS arithmetic_expression
   28                   | arithmetic_expression . NOT_EQUALS arithmetic_expression

    EQUALS      shift, and go to state 39
    NOT_EQUALS  shift, and go to state 40
    '+'         shift, and go to state 41
    '-'         shift, and go to state 42
    '*'         shift, and go to state 43
    ')'         shift, and go to state 51


state 34

   29 logical_expression: logical_expression . OR logical_expression
   30                   | logical_expression . AND logical_expression
   31                   | '(' logical_expression . ')'

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    ')'  shift, and go to state 52


state 35

    0 $accept: program $end .

    $default  accept


state 36

    3 program: program instruction . ';'
    4        | program instruction . error ';'

    error  shift, and go to state 53
    ';'    shift, and go to state 54


state 37

    2 program: instruction error . ';'

    ';'  shift, and go to state 55


state 38

    1 program: instruction ';' .

    $default  reduce using rule 1 (program)


state 39

   27 logical_expression: arithmetic_expression EQUALS . arithmetic_expression

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 27

    arithmetic_expression  go to state 56


state 40

   28 logical_expression: arithmetic_expression NOT_EQUALS . arithmetic_expression

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 27

    arithmetic_expression  go to state 57


state 41

   19 arithmetic_expression: arithmetic_expression '+' . arithmetic_expression

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 27

    arithmetic_expression  go to state 58


state 42

   20 arithmetic_expression: arithmetic_expression '-' . arithmetic_expression

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 27

    arithmetic_expression  go to state 59


state 43

   21 arithmetic_expression: arithmetic_expression '*' . arithmetic_expression

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 27

    arithmetic_expression  go to state 60


state 44

   29 logical_expression: logical_expression OR . logical_expression

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 11

    arithmetic_expression  go to state 48
    logical_expression     go to state 61


state 45

   30 logical_expression: logical_expression AND . logical_expression

    VARIABLE  shift, and go to state 25
    INT       shift, and go to state 4
    DOUBLE    shift, and go to state 5
    '-'       shift, and go to state 10
    '('       shift, and go to state 11

    arithmetic_expression  go to state 48
    logical_expression     go to state 62


state 46

   15 value_assigning: VARIABLE '=' arithmetic_expression .
   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43

    $default  reduce using rule 15 (value_assigning)


state 47

   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression
   22                      | '(' arithmetic_expression . ')'

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43
    ')'  shift, and go to state 51


state 48

   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression
   27 logical_expression: arithmetic_expression . EQUALS arithmetic_expression
   28                   | arithmetic_expression . NOT_EQUALS arithmetic_expression

    EQUALS      shift, and go to state 39
    NOT_EQUALS  shift, and go to state 40
    '+'         shift, and go to state 41
    '-'         shift, and go to state 42
    '*'         shift, and go to state 43


state 49

   29 logical_expression: logical_expression . OR logical_expression
   30                   | logical_expression . AND logical_expression
   32 if: IF '(' logical_expression . ')' '{' program '}'
   33   | IF '(' logical_expression . ')' '{' program '}' ELSE '{' program '}'

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    ')'  shift, and go to state 63


state 50

   29 logical_expression: logical_expression . OR logical_expression
   30                   | logical_expression . AND logical_expression
   34 while: WHILE '(' logical_expression . ')' '{' program '}'

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    ')'  shift, and go to state 64


state 51

   22 arithmetic_expression: '(' arithmetic_expression ')' .

    $default  reduce using rule 22 (arithmetic_expression)


state 52

   31 logical_expression: '(' logical_expression ')' .

    $default  reduce using rule 31 (logical_expression)


state 53

    4 program: program instruction error . ';'

    ';'  shift, and go to state 65


state 54

    3 program: program instruction ';' .

    $default  reduce using rule 3 (program)


state 55

    2 program: instruction error ';' .

    $default  reduce using rule 2 (program)


state 56

   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression
   27 logical_expression: arithmetic_expression EQUALS arithmetic_expression .

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43

    $default  reduce using rule 27 (logical_expression)


state 57

   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression
   28 logical_expression: arithmetic_expression NOT_EQUALS arithmetic_expression .

    '+'  shift, and go to state 41
    '-'  shift, and go to state 42
    '*'  shift, and go to state 43

    $default  reduce using rule 28 (logical_expression)


state 58

   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   19                      | arithmetic_expression '+' arithmetic_expression .
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression

    '*'  shift, and go to state 43

    $default  reduce using rule 19 (arithmetic_expression)


state 59

   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   20                      | arithmetic_expression '-' arithmetic_expression .
   21                      | arithmetic_expression . '*' arithmetic_expression

    '*'  shift, and go to state 43

    $default  reduce using rule 20 (arithmetic_expression)


state 60

   19 arithmetic_expression: arithmetic_expression . '+' arithmetic_expression
   20                      | arithmetic_expression . '-' arithmetic_expression
   21                      | arithmetic_expression . '*' arithmetic_expression
   21                      | arithmetic_expression '*' arithmetic_expression .

    $default  reduce using rule 21 (arithmetic_expression)


state 61

   29 logical_expression: logical_expression . OR logical_expression
   29                   | logical_expression OR logical_expression .
   30                   | logical_expression . AND logical_expression

    $default  reduce using rule 29 (logical_expression)


state 62

   29 logical_expression: logical_expression . OR logical_expression
   30                   | logical_expression . AND logical_expression
   30                   | logical_expression AND logical_expression .

    $default  reduce using rule 30 (logical_expression)


state 63

   32 if: IF '(' logical_expression ')' . '{' program '}'
   33   | IF '(' logical_expression ')' . '{' program '}' ELSE '{' program '}'

    '{'  shift, and go to state 66


state 64

   34 while: WHILE '(' logical_expression ')' . '{' program '}'

    '{'  shift, and go to state 67


state 65

    4 program: program instruction error ';' .

    $default  reduce using rule 4 (program)


state 66

   32 if: IF '(' logical_expression ')' '{' . program '}'
   33   | IF '(' logical_expression ')' '{' . program '}' ELSE '{' program '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    INT          shift, and go to state 4
    DOUBLE       shift, and go to state 5
    WRITE        shift, and go to state 6
    READ         shift, and go to state 7
    IF           shift, and go to state 8
    WHILE        shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    program                go to state 68
    instruction            go to state 13
    declaration            go to state 14
    value_assigning        go to state 15
    arithmetic_expression  go to state 16
    read                   go to state 17
    write                  go to state 18
    logical_expression     go to state 19
    if                     go to state 20
    while                  go to state 21


state 67

   34 while: WHILE '(' logical_expression ')' '{' . program '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    INT          shift, and go to state 4
    DOUBLE       shift, and go to state 5
    WRITE        shift, and go to state 6
    READ         shift, and go to state 7
    IF           shift, and go to state 8
    WHILE        shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    program                go to state 69
    instruction            go to state 13
    declaration            go to state 14
    value_assigning        go to state 15
    arithmetic_expression  go to state 16
    read                   go to state 17
    write                  go to state 18
    logical_expression     go to state 19
    if                     go to state 20
    while                  go to state 21


state 68

    3 program: program . instruction ';'
    4        | program . instruction error ';'
   32 if: IF '(' logical_expression ')' '{' program . '}'
   33   | IF '(' logical_expression ')' '{' program . '}' ELSE '{' program '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    INT          shift, and go to state 4
    DOUBLE       shift, and go to state 5
    WRITE        shift, and go to state 6
    READ         shift, and go to state 7
    IF           shift, and go to state 8
    WHILE        shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11
    '}'          shift, and go to state 70

    instruction            go to state 36
    declaration            go to state 14
    value_assigning        go to state 15
    arithmetic_expression  go to state 16
    read                   go to state 17
    write                  go to state 18
    logical_expression     go to state 19
    if                     go to state 20
    while                  go to state 21


state 69

    3 program: program . instruction ';'
    4        | program . instruction error ';'
   34 while: WHILE '(' logical_expression ')' '{' program . '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    INT          shift, and go to state 4
    DOUBLE       shift, and go to state 5
    WRITE        shift, and go to state 6
    READ         shift, and go to state 7
    IF           shift, and go to state 8
    WHILE        shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11
    '}'          shift, and go to state 71

    instruction            go to state 36
    declaration            go to state 14
    value_assigning        go to state 15
    arithmetic_expression  go to state 16
    read                   go to state 17
    write                  go to state 18
    logical_expression     go to state 19
    if                     go to state 20
    while                  go to state 21


state 70

   32 if: IF '(' logical_expression ')' '{' program '}' .
   33   | IF '(' logical_expression ')' '{' program '}' . ELSE '{' program '}'

    ELSE  shift, and go to state 72

    $default  reduce using rule 32 (if)


state 71

   34 while: WHILE '(' logical_expression ')' '{' program '}' .

    $default  reduce using rule 34 (while)


state 72

   33 if: IF '(' logical_expression ')' '{' program '}' ELSE . '{' program '}'

    '{'  shift, and go to state 73


state 73

   33 if: IF '(' logical_expression ')' '{' program '}' ELSE '{' . program '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    INT          shift, and go to state 4
    DOUBLE       shift, and go to state 5
    WRITE        shift, and go to state 6
    READ         shift, and go to state 7
    IF           shift, and go to state 8
    WHILE        shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11

    program                go to state 74
    instruction            go to state 13
    declaration            go to state 14
    value_assigning        go to state 15
    arithmetic_expression  go to state 16
    read                   go to state 17
    write                  go to state 18
    logical_expression     go to state 19
    if                     go to state 20
    while                  go to state 21


state 74

    3 program: program . instruction ';'
    4        | program . instruction error ';'
   33 if: IF '(' logical_expression ')' '{' program '}' ELSE '{' program . '}'

    TYPE_INT     shift, and go to state 1
    TYPE_DOUBLE  shift, and go to state 2
    VARIABLE     shift, and go to state 3
    INT          shift, and go to state 4
    DOUBLE       shift, and go to state 5
    WRITE        shift, and go to state 6
    READ         shift, and go to state 7
    IF           shift, and go to state 8
    WHILE        shift, and go to state 9
    '-'          shift, and go to state 10
    '('          shift, and go to state 11
    '}'          shift, and go to state 75

    instruction            go to state 36
    declaration            go to state 14
    value_assigning        go to state 15
    arithmetic_expression  go to state 16
    read                   go to state 17
    write                  go to state 18
    logical_expression     go to state 19
    if                     go to state 20
    while                  go to state 21


state 75

   33 if: IF '(' logical_expression ')' '{' program '}' ELSE '{' program '}' .

    $default  reduce using rule 33 (if)
